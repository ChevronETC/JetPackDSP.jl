var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"  JopConvolve\n  JopEnvelope\n  JopFilter","category":"page"},{"location":"reference/#JetPackDSP.JopConvolve","page":"Reference","title":"JetPackDSP.JopConvolve","text":"A = JopConvolve(dom, rng, h [, optional parameters])\n\nA is an n-dimension convolution (using the filter h::Array) operator with domain dom::JetSpace and range rng::JetSpace, and with the following optional named arguments:\n\nx0 is a tuple defining the origin of the upper-left corner of h\ndx is a tuple defining the spacing along each dimension of h\n\nExamples\n\n1D, causal\n\nA = JopConvolve(JetSpace(Float64,128), JetSpace(Float64,128), rand(32))\nm = zeros(domain(A))\nm[64] = 1.0\nd = A*m\n\n1D, zero-phase\n\nA = JopConvolve(JetSpace(Float64,128), JetSpace(Float64,128), rand(32), dx=(1.0,), x0=(-16.0,))\nm = zeros(domain(A))\nm[64] = 1.0\nd = A*m\n\n2D, zero-phase\n\nA = JopConvolve(JetSpace(Float64,128,128), JetSpace(Float64,128,128), rand(32,32), dx=(1.0,1.0), x0=(-16.0,-16.0))\nm = zeros(domain(A))\nm[64,64] = 1.0\nd = A*m\n\nNotes\n\nIt is often the case that the domain and range of the convolution operator are the same.  For this use-case, we provide\n\na convenience method for construction the operator:\n\nA = JopConvolve(spc, h [, optional parameters])\n\nwhere spc::JetSpace and is used for both dom and rng.\n\nSince smoothing is a common use-case for JopConvolve, we provide a convenience method for creating A specific\n\nto n-dimensional smoothing:\n\nA = JopConvolve(spc [, optional arguments])\n\nwhere the optional arguments and their default values are:\n\nsmoother=:gaussian choose between :gaussian, :triang and :rect\nn=(128,) choose the size of the smoothing window in each dimension.  If length(n)=1, then we assume a square window.\nsigma=(0.5,) for a gaussian window choose the shape of the window.  If length(sigma)=1, then we assume the same shape in each dimension.\n\n2D Smoothing Example\n\nP = JopPad(JetSpace(Float64,256,256), -10:256+11, -10:256+11, extend=true)\nS = JopConvolve(range(P), smoother=:rect, n=(1,1))\nR = JopPad(JetSpace(Float64,256,256), -10:256+11, -10:256+11, extend=false)\nm = rand(domain(P))\nd = R'∘S∘P*m\n\n\n\n\n\n","category":"function"},{"location":"reference/#JetPackDSP.JopEnvelope","page":"Reference","title":"JetPackDSP.JopEnvelope","text":"F = JopEnvelope(spc[, power=0.5, damping=0.0])\n\nwhere F is the envelope operator with doman and range given by spc::JetSpace. The Envelope is taken along the fastest dimension of the space.  For example, if spc=JetSpace{Float64,10,11} and A=rand(spc), then the envelope would be along each column of A.\n\nThe envelope of d is computed as: (d^2 + (Hd)^2 + damping)^(power/2) where Hd is the Hilbert transform of d.  The evelope is computed when power=1.  If power=2, then the square of the envelope is computed, and so on.\n\nNotes\n\nThe passed in power is multiplied by 1/2, and is the power for simple envelope, applied to the sum of the squares (d^2 + (Hd)^2). For example:\n\npower = 2.0 : (d^2 + (H d)^2)^1\n\nIf power < 2, and damping is not > 0, you may get Indian Bread (Nan) when envelope value is zero Default damping factor is eps(T). If you know your traces are not zero, set damping=0 in constructor to avoid over damping.\n\n\n\n\n\n","category":"function"},{"location":"reference/#JetPackDSP.JopFilter","page":"Reference","title":"JetPackDSP.JopFilter","text":"A = JopFilter(spc, responsetype, designmethod)\n\nwhere A is a filter applied to a signal in spc::JotSpace, and built using responsetype and designmethod.  The responsetype and designmethod are described in https://github.com/JuliaDSP/DSP.jl. The filter is applied along the fast dimension of the space.\n\nExamples\n\n1D\n\nusing JetPackDSP, Jets\nA = JopFilter(JetSpace(Float64,512), Highpass(10.0, fs=125), Butterworth(4))\nd = A*rand(domain(A))\n\n2D\n\nusing JetPackDSP, Jets\nA = JopFilter(JetSpace(Float64,512,10), Highpass(10.0, fs=125), Butterworth(4))\nd = A*rand(domain(A))\n\n\n\n\n\n","category":"function"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"#JetPackDSP","page":"JetPackDSP","title":"JetPackDSP","text":"","category":"section"},{"location":"","page":"JetPackDSP","title":"JetPackDSP","text":"DSP operator pack for Jets.jl and that uses DSP.jl.","category":"page"}]
}
